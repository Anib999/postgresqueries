//AS alias, || concat
1. SELECT name || ' ' || address AS "name address" FROM base_company
// user "" for names with spaces

//DESC || ASC
2. SELECT name FROM base_company ORDER BY name DESC
//for multiple
3. SELECT * FROM base_company ORDER BY name DESC, address ASC;

//The LENGTH() function accepts a string and returns the length of that string.
4. SELECT name, LENGTH(name) AS na FROM base_company

// na can directly be accessed
5. SELECT name, LENGTH(name) AS na FROM base_company ORDER BY na DESC

// ORDER BY sort_expression [ASC | DESC] [NULLS FIRST | NULLS LAST]

// The DISTINCT clause is used in the SELECT statement to remove duplicate rows from a result set.
6. SELECT DISTINCT bcolor, fcolor FROM distinct_demo ORDER BY bcolor, fcolor;

//DISTINCT with ON
7. SELECT DISTINCT ON (bcolor) bcolor, fcolor FROM distinct_demo ORDER BY bcolor, fcolor;

// use '' on after where
8. SELECT name FROM base_company WHERE name = 'anib';

//same operator OR , AND
9. SELECT * FROM base_company WHERE name = 'anib' OR address = 'New';

// cases needs to be matched
10. SELECT * FROM base_company WHERE name in ('anib', 'chic');

// in (%) followed by string
11. SELECT * FROM base_company WHERE name LIKE'ani%';

//length function with between
12. SELECT name, LENGTH(name) name_len FROM base_company WHERE LENGTH(name) BETWEEN 2 AND 3;

//<> == !=
13. SELECT name from base_company WHERE name LIKE 'an%' AND name <> 'chic'

// limit  limits the data returned null returns all
14. SELECT * FROM distinct_demo LIMIT 6

// offset offsets the data
15. SELECT * FROM distinct_demo LIMIT 6 OFFSET 2

//note limit is not sql standard, fetch is sql standard introduced in 2008 sql
16. SELECT * FROM distinct_demo FETCH FIRST ROW ONLY

//select 6 rows
17. SELECT * FROM distinct_demo FETCH FIRST 6 ROW ONLY

// offset specified rows
18. SELECT * FROM distinct_demo OFFSET 2 ROWS FETCH FIRST 6 ROW ONLY

//in
19. SELECT * FROM distinct_demo WHERE id IN (1,2)

//OR
20. SELECT * FROM distinct_demo WHERE id = 1 OR id = 3

//not in or <> 
21. SELECT * FROM distinct_demo WHERE id NOT IN (1,2)

// BETWEEN
22. SELECT * FROM sort_demo WHERE num BETWEEN 1 AND 3

//NOT BETWEEN
23. SELECT * FROM sort_demo WHERE num NOT BETWEEN 1 AND 3

//IMPORTANT SELECT USING DATE
24. SELECT * FROM sort_demo WHERE created_date BETWEEN '2022-08-11' AND '2022-08-19'; 

//IMPORTANT joins
//inner join
26. SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
INNER JOIN basket_b
    ON fruit_a = fruit_b;
//The inner join examines each row in the first table (basket_a). It compares the value in the fruit_a column with the value in the fruit_b column of each row in the second table (basket_b). If these values are equal, the inner join creates a new row that contains columns from both tables and adds this new row the result set.

//left join
27. SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
LEFT JOIN basket_b 
   ON fruit_a = fruit_b;
//The left join starts selecting data from the left table. It compares values in the fruit_a column with the values in the fruit_b column in the basket_b table.

//is null ONLY
28. SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
LEFT JOIN basket_b 
    ON fruit_a = fruit_b
WHERE b IS NULL;
// Note that the LEFT JOIN is the same as the LEFT OUTER JOIN so you can use them interchangeably.

// If these values are equal, the right join creates a new row that contains columns from both tables.
29. SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
RIGHT JOIN basket_b ON fruit_a = fruit_b;

// for null values
30. SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
RIGHT JOIN basket_b 
   ON fruit_a = fruit_b
WHERE a IS NULL;
//The RIGHT JOIN and RIGHT OUTER JOIN are the same therefore you can use them interchangeably.

//full outer join
31. SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
FULL OUTER JOIN basket_b 
    ON fruit_a = fruit_b;

//for null
32. SELECT
    a,
    fruit_a,
    b,
    fruit_b
FROM
    basket_a
FULL JOIN basket_b 
   ON fruit_a = fruit_b
WHERE a IS NULL OR b IS NULL;


// table alias
33. SELECT
    e.first_name employee,
    m .first_name manager
FROM
    employee e
INNER JOIN employee m 
    ON m.employee_id = e.manager_id
ORDER BY manager;

//inner join detail
34. SELECT
	customer.customer_id,
	first_name,
	last_name,
	amount,
	payment_date
FROM
	customer
INNER JOIN payment 
    ON payment.customer_id = customer.customer_id
ORDER BY payment_date;

//using using
35. SELECT
	customer_id,
	first_name,
	last_name,
	amount,
	payment_date
FROM
	customer
INNER JOIN payment USING(customer_id)
ORDER BY payment_date;	

//joining three or more tables using alias
36. SELECT
	c.customer_id,
	c.first_name customer_first_name,
	c.last_name customer_last_name,
	s.first_name staff_first_name,
	s.last_name staff_last_name,
	amount,
	payment_date
FROM
	customer c
INNER JOIN payment p 
    ON p.customer_id = c.customer_id
INNER JOIN staff s 
    ON p.staff_id = s.staff_id
ORDER BY payment_date;

// left join
37. SELECT
	pka,
	c1,
	pkb,
	c2
FROM
	A
LEFT JOIN B ON pka = fka;

//
38. SELECT
	film.film_id,
	title,
	inventory_id
FROM
	film
LEFT JOIN inventory 
    ON inventory.film_id = film.film_id
ORDER BY title;

//using using
39. SELECT
	f.film_id,
	title,
	inventory_id
FROM
	film f
LEFT JOIN inventory i USING (film_id)
WHERE i.film_id IS NULL
ORDER BY title;

//right jion details
40. Select review, title from films right join film_reviews on film_reviews.film_id = films.film_id

//using using
41. SELECT review, title
FROM films
RIGHT JOIN film_reviews USING (film_id);

//null 
42. SELECT review, title
FROM films
RIGHT JOIN film_reviews using (film_id)
WHERE title IS NULL;

//self join use only when comparing data
43. SELECT select_list
FROM table_name t1
INNER JOIN table_name t2 ON join_predicate;

//no null value
44. SELECT
    e.first_name || ' ' || e.last_name employee,
    m .first_name || ' ' || m .last_name manager
FROM
    employee e
INNER JOIN employee m ON m .employee_id = e.manager_id
ORDER BY manager;

//with null value
45. SELECT
    e.first_name || ' ' || e.last_name employee,
    m .first_name || ' ' || m .last_name manager
FROM
    employee e
LEFT JOIN employee m ON m .employee_id = e.manager_id
ORDER BY manager;

//comparing the values
46. SELECT
    f1.title,
    f2.title,
    f1.length
FROM
    film f1
INNER JOIN film f2 
    ON f1.film_id <> f2.film_id AND 
       f1.length = f2.length;

//outer join
47. select employee_name, department_name from employees e full outer join departments d on d.department_id = e.department_id where employee_name is null;

48. select employee_name, department_name from employees e full outer join departments d on d.department_id = e.department_id where department_name is null;

//cross join
49. SELECT select_list
FROM T1
CROSS JOIN T2;

//is equal to 
SELECT select_list
FROM T1, T2;

//similar
SELECT *
FROM T1
INNER JOIN T2 ON true;

// cross join
50. SELECT *
FROM T1
CROSS JOIN T2;

//natural join
51. SELECT * FROM products
NATURAL JOIN categories;

// above is equal to following
52. SELECT	* FROM products
INNER JOIN categories USING (category_id);

//group by
53. SELECT
   customer_id
FROM
   payment
GROUP BY
   customer_id;

// aggreate function sum is affreate
54. SELECT
	customer_id,
	SUM (amount)
FROM
	payment
GROUP BY
	customer_id;

//sum
55. SELECT
	customer_id,
	SUM (amount)
FROM
	payment
GROUP BY
	customer_id
ORDER BY
	SUM (amount) DESC;

// with sum and join
56. SELECT
	first_name || ' ' || last_name full_name,
	SUM (amount) amount
FROM
	payment
INNER JOIN customer USING (customer_id)    	
GROUP BY
	full_name
ORDER BY amount DESC;	

//with count
57. SELECT
	staff_id,
	COUNT (payment_id)
FROM
	payment
GROUP BY
	staff_id;

//multiple group by columns
58. SELECT 
	customer_id, 
	staff_id, 
	SUM(amount) 
FROM 
	payment
GROUP BY 
	staff_id, 
	customer_id
ORDER BY 
    customer_id;

// date
59. SELECT 
	DATE(payment_date) paid_date, 
	SUM(amount) sum
FROM 
	payment
GROUP BY
	DATE(payment_date);

// having basic
60. SELECT
	column1,
	aggregate_function (column2)
FROM
	table_name
GROUP BY
	column1
HAVING
	condition;

// note column alias cannot be used on having as having comes before select
https://www.postgresqltutorial.com/wp-content/uploads/2020/07/PostgreSQL-Having-1.png

// simple
61. SELECT
	customer_id,
	SUM (amount)
FROM
	payment
GROUP BY
	customer_id
HAVING
	SUM (amount) > 200;

//UNION query
62. SELECT select_list_1
FROM table_expresssion_1
UNION
SELECT select_list_2
FROM table_expression_2

//union remove duplicate data
63. SELECT * FROM top_rated_films
UNION
SELECT * FROM most_popular_films;

//all gives all data
64. SELECT * FROM top_rated_films
UNION ALL
SELECT * FROM most_popular_films;

//with order by
65. SELECT * FROM top_rated_films
UNION ALL
SELECT * FROM most_popular_films
ORDER BY title;